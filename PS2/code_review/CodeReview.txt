Contact should also include a postal address.

A Phone Number should probably be its own class even if internally you
represent it as a String. A phone number is more of an object than a String.
Furthermore, you can hide any implementation details from the user and modify 
them in the future.
You also shouldn't have too much restriction on the format that the user of the
API can pass to phone number. You can pretty easily make validation checks internally 
to reformat the number as you want it.

Is there a reason none of the Contact fields are mandatory? Shouldn't name and 
phone number be mandatory. If not, you should mention why creating an empty Contact 
would be useful. Especially since your Contact class appears to be immutable so you can't
set fields at a later time. You would need to create a new Contact object.
You should mention these things.

All of your methods that throw an exception should have an @throws tag. That's
where you should specify which exceptions the method throws.

In the equals method, you need to use the instanceof operator to check that 'other' 
is a Contact object before doing an explicit cast. Furthermore you don't need to 
check for null if you perform instanceof.
When you do String comparison you need to use 'equals' rather than '=='. The equality
operator checks if the references are referring to the same object, not whether or not
the two strings contain the same characters as your javadoc suggests.
Your first comparison of 'if (this == other)' is implicitly the same as your final 
comparison of all of the fields.

Your AddressBook javadoc is a little misleading. It should say that AddressBook's store
Contact objects. Then refer the user to the Contact class for what information
Contact's store with an @see tag.

Use Interfaces or top level classes when declaring an object. It allows for more generic
programming and polymorphism. 
ex. private List<Contact> allContacts;


Should add initial check to 'search' method for empty or null search string.

In the 'match' method you should use StringBuilder to create the contactInfo string.
Additionally, I see little reason to even create a new string which takes up time
and space. You could just check each field one at a time in order of most to least 
likely to be searched. 

Your exceptions for 'importContact' and 'exportContact' could be more specific and 
useful to someone using the API. For example, throw FileNotFoundException is the path
does not exist.

You don't have a method to retrieve a copy of the list of contacts.
How would someone using your API show the list of contacts in an address book 
application to an end user?

Both classes could also use a toString method. You should probably always override
toString.

